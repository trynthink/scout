type: object
required: [description]
properties:
  description:
    type: ["string", "null"]
    description: A description of the scenario configuration.
  ecm_prep:
    type: object
    required: []
    properties:
      ecm_directory:
        type: ["string", "null"]
        default: null
        description: Directory containing ECM definitions and savings shapes (if applicable). The directory path can be absolute or relative to either the configuration file (.yml) or the command line path, depending on where the argument is assigned. If not provided, ./ecm_definitions will be used.

      ecm_files:
        type: ["array", "null"]
        default: null
        description: Specify a subset of ECM definitions in the ECM directory. Values must contain exact matches to the ECM definition file names in `ecm_directory`, excluding the file extension. If argument is null, then all files within `ecm_directory` will be prepared, subject to the `ecm_files_regex` argument, if applicable.

      ecm_files_regex:
        type: array
        default: []
        description: Specify a subset of ECM definitions in the ECM directory using a regular expression. Each value will be matched to file names in `ecm_directory`.

      ecm_packages:
        type: "array"
        default: []
        description: Specify ECM packages; values must correspond with package_ecms.json package names in the ECM directory. If no list or an empty list is provided, no packages will be used. Include an asterisk ("*") in the list to prepare all packages present in package_ecms.json. Contributing ECMs for specified packages will automatically be prepared regardless of their presence in the `ecm_directory`, `ecm_files`, and/or `ecm_files_regex` arguments. 

      site_energy:
        type: boolean
        default: false
        description: If true, enable site energy calculation.

      captured_energy:
        type: boolean
        default: false
        description: If true, enable captured energy calculation.

      alt_regions:
        type: "string"
        enum: [EMM, State, AIA]
        default: EMM
        description: Specify an alternative region breakdown.

      tsv_metrics:
        type: object
        required: [tsv_type, tsv_daily_hr_restrict]
        properties:
          tsv_type:
            type: ["string", "null"]
            enum: [energy, power, null]
            description: Time-sensitive metric desired, where `energy` is the change in energy and `power` is the change in power (e.g., single hour GW). Required if running tsv_metrics.
          tsv_daily_hr_restrict:
            type: ["string", "null"]
            enum: [all, peak, low, null]
            description: The daily hour range to restrict time-sensitive metrics, where `all` is all hours, `peak` is peak demand period hours, and `low` is low demand period hours. Required if running tsv_metrics.
          tsv_sys_shape_case:
            type: ["string", "null"]
            enum: [total reference, total high renewables, net renewable reference, net renewable high renewables, null]
            description: The basis for determining hours for peak or low demand. Required if tsv_daily_hr_restrict is `peak` or `low`.
          tsv_season:
            type: ["string", "null"]
            enum: [summer, winter, intermediate, null]
            description: Season of focus for time-sensitve metrics.
          tsv_energy_agg:
            type: ["string", "null"]
            enum: [sum, average, null]
            description: Define how the the tsv_daily_hr_restrict hours are aggregated, required when tsv_type is `energy`.
          tsv_power_agg:
            type: ["string", "null"]
            enum: [peak, average, null]
            description: Define how the the tsv_daily_hr_restrict hours are aggregated, required when tsv_type is `power`.
          tsv_average_days:
            type: ["string", "null"]
            enum: [all, weekdays, weekends, null]
            description: The day type to average over. Required if tsv_type is `energy` or tsv_power_agg is `average`.

      sect_shapes:
        type: boolean
        default: false
        description: If true, enable calculation of sector-level electricity savings shapes.

      rp_persist:
        type: boolean
        default: false
        description: If true, enable relative performance persistence.

      verbose:
        type: boolean
        default: false
        description: If true, enable verbose mode.

      health_costs:
        type: boolean
        default: false
        description: If true, enable health costs. Requires alt_regions to be set to `EMM`.

      split_fuel:
        type: boolean
        default: false
        description: If true, split out ECM results reporting by fuel type.

      detail_brkout:
        type: array
        description: List of options by which to breakout results. The `fuel types` option is only valid if the split_fuel argument is set to false. The `all` option selects all three breakout categories.
        default: []
        items:
          type: ["string", "null"]
          enum: [regions, buildings, fuel types, all]

      no_scnd_lgt:
        type: boolean
        default: false
        description: If true, disable the calculation of secondary heating and cooling energy effects from changes in lighting efficacy.

      floor_start:
        type: ["integer", "null"]
        default: null
        description: Apply an elevated performance floor starting in the year specified. The desired future year must be given in the format YYYY.

      pkg_env_costs:
        type: ["string", "null"]
        enum: [include HVAC, exclude HVAC, null]
        description: Define what measure data should be written out for inclusion in measure competition. `include HVAC` will prepare HVAC-only versions of all HVAC/envelope packages for measure competition, `exclude HVAC` will exclude these HVAC-only measures from measure competition.

      exog_hp_rates:
        type: object
        properties:
          exog_hp_rate_scenario:
            type: ["string", "null"]
            enum: [conservative, optimistic, aggressive, most aggressive, null]
            description: Guidehouse E3HP conversion scenario to use for exogenous HP rates.
          switch_all_retrofit_hp:
            type: boolean
            default: false
            description: If true, assume all retrofits convert to heat pumps, otherwise, retrofits are subject to the same external heat pump conversion rates assumed for new/replacement decisions. Only applicable if `exog_hp_rate_scenario` and `retrofit_type` are defined.

      alt_ref_carb:
        type: ["string", "null"]
        enum: [MidCase, DECARB-bau, null]
        description: Specify alternate reference grid scnenario for baseline electricity emissions intensities (rather than AEO). 'MidCase' refers to the Standard Scenarios Mid Case and 'DECARB-bau' refers to the ReEDS "DECARB" business-as-usual scenario.

      grid_decarb:
        type: object
        required: [grid_decarb_level, grid_assessment_timing]
        properties:
          grid_decarb_level:
            type: ["string", "null"]
            enum: [95by2050, 100by2035, DECARB-mid, DECARB-high, null]
            description: Enable grid decarbonization - `95by2050` represents a 95 percent reduction in grid emissions from 2005 levels by 2050 and `100by2035` represents 100 percent grid decarbonization by 2035. 'DECARB' options were produced as part of EERE's DECARB initiative; `DECARB-mid` represents 97 percent grid decarbonization by 2050, and `DECARB-high` represents 100 percent grid decarbonization by 2035. Only applicable if `grid_assessment_timing` is also provided.
          grid_assessment_timing:
            type: ["string", "null"]
            enum: [before, after, null]
            description: When to assess avoided emissions and costs from non-fuel switching measures relative to the additional grid decarbonization. Only applicable if `grid_decarb_level` is provided.

      adopt_scn_restrict:
        type: ["string", "null"]
        enum: [Max adoption potential, Technical potential, null]
        default: null
        description: Specify single desired adoption scenario, otherwise both scenarios will be used.

      retrofits:
        type: object
        required: [retrofit_type]
        properties:
          retrofit_type:
            type: ["string", "null"]
            enum: [constant, increasing, null]
            description: Specify early retrofit rates. `constant` assumes component-based early retrofit rates that do not change over time, `increasing` assumes rates that increase over time.
          retrofit_multiplier:
            type: ["number", "null"]
            description: Factor by which early retrofit rates are multiplied (only for increasing retrofit_type).
          retrofit_mult_year:
            type: ["integer", "null"]
            description: The year by which the retrofit multiplier is achieved (only for increasing retrofit_type).

      add_typ_eff:
        type: boolean
        default: false
        description: If true, enable automatic addition of ECMs with typical (business-as-usual) efficiency to compete with user-defined ECMs.

      pkg_env_sep:
        type: boolean
        default: false
        description: If true, enable output of separate envelope ECM impacts when both HVAC and envelope ECMs are combined in one or more measure packages.

      fugitive_emissions:
        type: array
        items:
          type: ["string", "null"]
          enum: [methane-low, methane-mid, methane-high, low-gwp refrigerant, typical refrigerant, typical refrigerant no phaseout]
        default: []
        description: Array enabling fugitive emissions; array may include one of the three supply chain methane leakage rate options and one of the three refrigerant options.
        maxItems: 2
        minItems: 0
        not:
          anyOf:
            - items:
                type: ["string", "null"]
                enum: [typical refrigerant, low-gwp refrigerant, typical refrigerant no phaseout]
              minItems: 2
            - items:
                type: ["string", "null"]
                enum: [methane-low, methane-mid, methane-high]
              minItems: 2

      no_eff_capt:
        type: boolean
        default: false
        description: If true, suppress reporting of ECM-captured efficient energy use.

      no_lnkd_costs:
        type: object
        properties:
          no_lnkd_stk_costs:
            type: boolean
            default: false
            description: For measures that span heating or cooling and other end uses, count stock costs for only the anchor end use (rather than all end uses) in representing competition w/ other measures (default anchor is heating).
          no_lnkd_op_costs:
            type: boolean
            default: false
            description: For measures that span heating or cooling and other end uses, count operating costs for only the anchor end use (rather than all end uses) in representing competition w/ other measures (default anchor is heating).
  run:
    type: object
    required: []
    properties:
      results_directory:
        type: ["string", "null"]
        default: null
        description: Directory in which to output results. The directory path can be absolute or relative to either the configuration file (.yml) or the command line path, depending on where the argument is assigned. If not provided, ./results will be used.
      verbose:
        type: boolean
        default: false
        description: If true, print all warnings to stdout.
      mkt_fracs:
        type: boolean
        default: false
        description: If true, flag market penetration outputs.
      trim_results:
        type: boolean
        default: false
        description: If true, reduce results file size.
      report_stk:
        type: boolean
        default: false
        description: If true, report baseline/measure stock data.
      report_cfs:
        type: boolean
        default: false
        description: If true, report competition adjustment fractions.

